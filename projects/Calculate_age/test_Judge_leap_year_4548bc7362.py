# Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

import unittest
from calendar import isleap
from calculate import judge_leap_year

class TestJudgeLeapYear(unittest.TestCase):

    def test_Judge_leap_year_4548bc7362(self):
        # Test if the function correctly identifies a leap year
        self.assertEqual(judge_leap_year(2000), True, "Failed on a leap year")

        # Test if the function correctly identifies a non-leap year
        self.assertEqual(judge_leap_year(2001), False, "Failed on a non-leap year")

        # Test if the function correctly identifies a year that is divisible by 100 but not by 400
        self.assertEqual(judge_leap_year(1900), False, "Failed on a year that is divisible by 100 but not by 400")

        # Test if the function correctly identifies a year that is divisible by 4 but not by 100
        self.assertEqual(judge_leap_year(2004), True, "Failed on a year that is divisible by 4 but not by 100")

        # Test if the function correctly handles a negative year
        with self.assertRaises(ValueError):
            judge_leap_year(-2000)

        # Test if the function correctly handles a non-integer year
        with self.assertRaises(TypeError):
            judge_leap_year("2000")

if __name__ == '__main__':
    unittest.main()
