# Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

import unittest
from calculate import month_days

class TestCalculate(unittest.TestCase):

    def test_month_days_with_leap_year(self):
        # test February in leap year
        self.assertEqual(month_days(2, True), 29)
        # test months with 31 days in leap year
        self.assertEqual(month_days(1, True), 31)
        self.assertEqual(month_days(3, True), 31)
        self.assertEqual(month_days(5, True), 31)
        self.assertEqual(month_days(7, True), 31)
        self.assertEqual(month_days(8, True), 31)
        self.assertEqual(month_days(10, True), 31)
        self.assertEqual(month_days(12, True), 31)
        # test months with 30 days in leap year
        self.assertEqual(month_days(4, True), 30)
        self.assertEqual(month_days(6, True), 30)
        self.assertEqual(month_days(9, True), 30)
        self.assertEqual(month_days(11, True), 30)

    def test_month_days_with_non_leap_year(self):
        # test February in non-leap year
        self.assertEqual(month_days(2, False), 28)
        # test months with 31 days in non-leap year
        self.assertEqual(month_days(1, False), 31)
        self.assertEqual(month_days(3, False), 31)
        self.assertEqual(month_days(5, False), 31)
        self.assertEqual(month_days(7, False), 31)
        self.assertEqual(month_days(8, False), 31)
        self.assertEqual(month_days(10, False), 31)
        self.assertEqual(month_days(12, False), 31)
        # test months with 30 days in non-leap year
        self.assertEqual(month_days(4, False), 30)
        self.assertEqual(month_days(6, False), 30)
        self.assertEqual(month_days(9, False), 30)
        self.assertEqual(month_days(11, False), 30)

if __name__ == '__main__':
    unittest.main(verbosity=2)
