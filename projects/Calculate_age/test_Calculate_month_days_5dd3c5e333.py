# Test generated by RoostGPT for test rahul-local-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Scenario: Check if the function returns 31 days for months that have 31 days.
  - Given: Month is one from [1, 3, 5, 7, 8, 10, 12] and leap year can be either True or False.
  - Then: The function should return 31.

2. Scenario: Check if the function returns 30 days for months that have 30 days.
  - Given: Month is one from [4, 6, 9, 11] and leap year can be either True or False.
  - Then: The function should return 30.

3. Scenario: Check if the function returns 28 days for the month of February in a non-leap year.
  - Given: Month is 2 and leap_year is False.
  - Then: The function should return 28.

4. Scenario: Check if the function returns 29 days for the month of February in a leap year.
  - Given: Month is 2 and leap_year is True.
  - Then: The function should return 29.

5. Scenario: Negative Test - Given invalid month number outside of 1-12.
  - Given: Month is outside the range 1-12 (13 or -1) and leap year can be either True or False.

6. Scenario: Negative Test - Given non-integer values for months.
  - Given: Month is not an integer (strings, decimal numbers, etc.). 

7. Scenario: Negative Test - Given non-boolean values for leap_year.
  - Given: leap_year is not a boolean (numbers, strings, null, etc.).
"""
import pytest
from calculate import month_days

def test_month_days_31():
    for month in [1, 3, 5, 7, 8, 10, 12]:
        assert month_days(month, True) == 31
        assert month_days(month, False) == 31

def test_month_days_30():
    for month in [4, 6, 9, 11]:
        assert month_days(month, True) == 30
        assert month_days(month, False) == 30

def test_month_days_feb_non_leap():
    assert month_days(2, False) == 28

def test_month_days_feb_leap():
    assert month_days(2, True) == 29

def test_invalid_month_number():
    with pytest.raises(TypeError):
        month_days(13, True)
    with pytest.raises(TypeError):
        month_days(-1, False)

def test_non_integer_month():
    with pytest.raises(TypeError):
        month_days("February", True)
    with pytest.raises(TypeError):
        month_days(2.5, False)

def test_non_boolean_leap_year():
    with pytest.raises(TypeError):
        month_days(2, "True")
    with pytest.raises(TypeError):
        month_days(2, None)
    with pytest.raises(TypeError):
        month_days(2, 1)
