# Test generated by RoostGPT for test rahul-python-test using AI Type Open AI and AI Model gpt-4

"""
1. Scenario: Check if the function returns 31 days for months January, March, May, July, August, October and December when leap_year is true.
   Expected Result: The function should return 31.

2. Scenario: Check if the function returns 31 days for months January, March, May, July, August, October and December when leap_year is false.
   Expected Result: The function should return 31.

3. Scenario: Check if the function returns 30 days for months April, June, September and November when leap_year is true.
   Expected Result: The function should return 30.

4. Scenario: Check if the function returns 30 days for months April, June, September and November when leap_year is false.
   Expected Result: The function should return 30.

5. Scenario: Check if the function returns 29 days for the month of February when leap_year is true.
   Expected Result: The function should return 29.

6. Scenario: Check if the function returns 28 days for the month of February when leap_year is false.
   Expected Result: The function should return 28.

7. Scenario: Check if the function handles the case where the month is not within the range 1-12.
   Expected Result: The function behavior is undefined. It may return None or throw an exception, depending on how you choose to handle this case.

8. Scenario: Check if the function handles the case where the leap_year is not a boolean value.
   Expected Result: The function behavior is undefined. It may return None or throw an exception, depending on how you choose to handle this case.
"""
import pytest
import calculate

def test_month_days_31_days_leap_year():
    for month in [1, 3, 5, 7, 8, 10, 12]:
        assert calculate.month_days(month, True) == 31

def test_month_days_31_days_non_leap_year():
    for month in [1, 3, 5, 7, 8, 10, 12]:
        assert calculate.month_days(month, False) == 31

def test_month_days_30_days_leap_year():
    for month in [4, 6, 9, 11]:
        assert calculate.month_days(month, True) == 30

def test_month_days_30_days_non_leap_year():
    for month in [4, 6, 9, 11]:
        assert calculate.month_days(month, False) == 30

def test_month_days_february_leap_year():
    assert calculate.month_days(2, True) == 29

def test_month_days_february_non_leap_year():
    assert calculate.month_days(2, False) == 28

def test_month_days_invalid_month():
    with pytest.raises(Exception):
        calculate.month_days(13, True)

def test_month_days_invalid_leap_year():
    with pytest.raises(Exception):
        calculate.month_days(2, "not a boolean")
