# Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

import unittest
from add import add_numbers

class TestAddNumbers(unittest.TestCase):

    # test method name: test_Add_numbers_4beee899f4
    def test_Add_numbers_4beee899f4(self):

        # testing with positive numbers
        result = add_numbers(3, 2)
        self.assertEqual(result, 5, "Should be: 5")

        # testing with negative numbers
        result = add_numbers(-2, -3)
        self.assertEqual(result, -5, "Should be: -5")

        # testing with mixed numbers (positive and negative)
        result = add_numbers(-2, 3)
        self.assertEqual(result, 1, "Should be: 1")

        # testing with zero
        result = add_numbers(0, 3)
        self.assertEqual(result, 3, "Should be: 3")

        # testing with floating numbers
        result = add_numbers(1.5, 0.5)
        self.assertEqual(result, 2.0, "Should be: 2.0")

        # testing with large numbers
        result = add_numbers(100000000000, 2000000000)
        self.assertEqual(result, 102000000000, "Should be: 102000000000")

        # testing with not numbers to raise TypeError.
        with self.assertRaises(TypeError):
            result = add_numbers("abc", 2.5)

if __name__ == '__main__':
    unittest.main()
