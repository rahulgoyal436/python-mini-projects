# Test generated by RoostGPT for test Rahul-pythn-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Scenario: Adding two positive numbers.
   Test Case: Input num1 as 5, num2 as 10, and verify if add_numbers returns 15.

2. Scenario: Adding two negative numbers.
   Test Case: Input num1 as -5, num2 as -10, and verify if add_numbers returns -15.

3. Scenario: Adding positive and negative number.
   Test Case: Input num1 as -5, num2 as 10, and verify if add_numbers returns 5.

4. Scenario: Adding a number and zero.
   Test Case: Input num1 as 0, num2 as 10, and verify if add_numbers returns 10.

5. Scenario: Adding two zero numbers.
   Test Case: Input num1 as 0, num2 as 0, and verify if add_numbers returns 0.

6. Scenario: Adding a number and its negative to see if it returns zero.
   Test Case: Input num1 as 10, num2 as -10, and verify if add_numbers returns 0.

7. Scenario: Adding two floating point number.
   Test Case: Input num1 as 1.2, num2 as 2.3, and verify if add_numbers returns 3.5.

8. Scenario: Adding positive number and negative floating point number.
   Test Case: Input num1 as 5, num2 as -2.5, and verify if add_numbers returns 2.5.

9. Scenario: Adding extremely large number.
   Test Case: Input one extremely large number (e.g.num1 as 1e100), and other normal number as num2 (e.g. 10), and verify if return of add_number matches with expectation.

10. Scenario: Adding extremely large numbers.
   Test Case: Input two extremely large numbers (e.g. num1 as 1e100 and num2 as 1e150), and verify if return of add_number matches with expectation. This will test overflow limit.

Remember that even though Python is a dynamically typed language, you cannot add an integer and a string or any other data type to a number. If you do so, the program will stop with an error.
"""
import pytest
from add import add_numbers

def test_Add_numbers_4beee899f4():
    # Testing adding two positive numbers
    assert add_numbers(5,10) == 15, "Should return 15"

    # Testing adding two negative numbers
    assert add_numbers(-5,-10) == -15, "Should return -15"
        
    # Testing adding positive and negative numbers
    assert add_numbers(-5,10) == 5, "Should return 5"
        
    # Testing adding a number and 0
    assert add_numbers(0,10) == 10, "Should return 10"
        
    # Testing adding two zero numbers
    assert add_numbers(0,0) == 0, "Should return 0"
        
    # Testing adding a number its negative 
    assert add_numbers(10,-10) == 0, "Should return 0"
        
    # Testing adding two floating point number 
    assert add_numbers(1.2,2.3) == 3.5, "Should return 3.5"
        
    # Testing adding positive number and negative decimal
    assert add_numbers(5,-2.5) == 2.5, "Should return 2.5"
        
    # Testing adding extremely large number
    # TODO: Update the numbers for the test case
    assert add_numbers(1e100,10) == 1e100+10, "Should return: " + str(1e100+10)

    # Testing adding two extremely large numbers
    # This will test the overflow limit of Python
    # TODO: Update the numbers for the test case
    assert add_numbers(1e100,1e150) == 1e150, "Should return '1e+150'"

    print("All test cases pass")

if __name__ == "__main__":
    test_Add_numbers_4beee899f4()
 