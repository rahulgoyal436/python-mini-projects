# Test generated by RoostGPT for test Rahul-pythn-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
Scenario 1: Positive Numbers
Test if the function correctly adds two positive numbers.

Scenario 2: Negative Numbers
Test if the function correctly adds two negative numbers. 

Scenario 3: Positive and Negative Number
Check if the function correctly adds a positive number and a negative number. 

Scenario 4: Zeros 
Verify that the add_numbers function correctly manages the addition of two zero values. 

Scenario 5: Zero and Non-Zero 
Check if the function returns correct value when zero is added with a non-zero number.

Scenario 6: Large Numbers 
Test if the function is able to handle and correctly add very large numbers.

Scenario 7: Decimal Values 
Test if the function correctly handles and adds decimal numbers (float values).

Scenario 8: No Arguments
Test the response of the function when no arguments are passed.

Scenario 9: More than Two Arguments
Evaluate how the function behaves when more than two numbers are given for addition.

Scenario 10: Non-Numeric Values
Check the response of the function for non-numeric values like strings, arrays, dictionaries etc.

Note: Scenarios 8, 9 and 10 are error scenarios assuming that the function specifications require it to accept exactly two numeric arguments.

"""
# necessary import statement 
from add import add_numbers
import pytest

# definition of the test function
def test_Add_numbers_4beee899f4():

    # Scenario 1: Positive Numbers
    assert add_numbers(2,3) == 5

    # Scenario 2: Negative Numbers
    assert add_numbers(-2,-3) == -5

    # Scenario 3: Positive and Negative Number
    assert add_numbers(2,-3) == -1

    # Scenario 4: Zeros
    assert add_numbers(0,0) == 0

    # Scenario 5: Zero and Non-Zero
    assert add_numbers(0,2) == 2

    # Scenario 6: Large Numbers
    assert add_numbers(1111111111, 2222222222) == 3333333333

    # Scenario 7: Decimal Values
    assert add_numbers(1.5, 2.5) == 4.0

    # Scenario 8: No Arguments
    with pytest.raises(TypeError):
        assert add_numbers()

    # Scenario 9: More than Two Arguments
    with pytest.raises(TypeError):
        assert add_numbers(1,2,3) 

    # Scenario 10: Non-Numeric Values
    with pytest.raises(TypeError):
        assert add_numbers("1","2")

