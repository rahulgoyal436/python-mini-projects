# Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
Here are some test scenarios to validate the business logic of the function `add_numbers()`:

1. Test if the function returns the correct sum when given two positive integers.
    - Inputs: `num1 = 5`, `num2 = 3`
    - Expected outcome: `8`

2. Test if the function works correctly with zero as an argument.
    - Inputs: `num1 = 0`, `num2 = 3`
    - Expected outcome: `3`

3. Test if the function returns the correct result when given two negative integers.
    - Inputs: `num1 = -8`, `num2 = -2`
    - Expected outcome: `-10`

4. Test if the function returns the correct result when given a positive and a negative integer.
    - Inputs: `num1 = -4`, `num2 = 8`
    - Expected outcome: `4`

5. Test if the function behaves correctly when given two floating point numbers.
    - Inputs: `num1 = 1.5`, `num2 = 2.5`
    - Expected outcome: `4.0`

6. Test if the function returns the correct result when given a negative floating point number and a positive integer.
    - Inputs: `num1 = -1.2`, `num2 = 3`
    - Expected outcome: `1.8`

7. Test if the function works correctly with zero as a floating point number.
    - Inputs: `num1 = 0.0`, `num2 = 4`
    - Expected outcome: `4.0`

8. Test if the function returns the correct result when given a very large numbers.
    - Inputs: `num1 = 99999999999999999`, `num2 = 11111111111111111`
    - Expected outcome: `111111111111111110`

9. Test if the function handles situations where the sum is zero.
    - Inputs: `num1 = -5`, `num2 = 5`
    - Expected outcome: `0`
"""
import pytest
from add import add_numbers

def test_Add_numbers_4beee899f4():
    # Test if the function returns the correct sum when given two positive integers.
    assert add_numbers(5, 3) == 8

    # Test if the function works correctly with zero as an argument.
    assert add_numbers(0, 3) == 3

    # Test if the function returns the correct result when given two negative integers.
    assert add_numbers(-8, -2) == -10

    # Test if the function returns the correct result when given a positive and a negative integer.
    assert add_numbers(-4, 8) == 4

    # Test if the function behaves correctly when given two floating point numbers.
    assert add_numbers(1.5, 2.5) == 4.0

    # Test if the function returns the correct result when given a negative floating point number and a positive integer.
    assert add_numbers(-1.2, 3) == pytest.approx(1.8, 0.01)

    # Test if the function works correctly with zero as a floating point number.
    assert add_numbers(0.0, 4) == 4.0

    # Test if the function returns the correct result when given a very large numbers.
    assert add_numbers(99999999999999999, 11111111111111111) == 111111111111111110

    # Test if the function handles situations where the sum is zero.
    assert add_numbers(5, -5) == 0
