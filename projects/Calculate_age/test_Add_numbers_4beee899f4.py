# Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

# Import necessary modules and functions
import unittest
from add import add_numbers

class TestAddNumbers(unittest.TestCase):
    """Class to test method add_numbers in add module"""

    def test_Add_numbers_4beee899f4(self):
        """Method to test add_numbers with multiple test cases"""

        # Test case 1: Testing with two positive integers
        num1, num2 = 5, 4
        result = add_numbers(num1, num2)
        expected_result = 9
        self.assertEqual(result, expected_result, "Addition of two positive integers should be correct")

        # Test case 2: Testing with one positive and one negative integer
        num1, num2 = -3, 7
        result = add_numbers(num1, num2)
        expected_result = 4
        self.assertEqual(result, expected_result, "Addition with one positive and one negative integer should be correct")

        # Test case 3: Testing with two negative integers
        num1, num2 = -3, -7
        result = add_numbers(num1, num2)
        expected_result = -10
        self.assertEqual(result, expected_result, "Addition of two negative integers should be correct")

        # Test case 4: Testing with two floats
        num1, num2 = 3.5, 4.5
        result = add_numbers(num1, num2)
        expected_result = 8.0
        self.assertEqual(result, expected_result, "Addition of two floats should be correct")

        # Test case 5: Testing with num1 as float and num2 as integer
        num1, num2 = 3.5, 4
        result = add_numbers(num1, num2)
        expected_result = 7.5
        self.assertEqual(result, expected_result, "Addition of float and integer should be correct")

        # Test case 6: Testing with num1 as integer and num2 as float
        num1, num2 = 3, 4.5
        result = add_numbers(num1, num2)
        expected_result = 7.5
        self.assertEqual(result, expected_result, "Addition of integer and float should be correct")

if __name__ == '__main__':
    unittest.main()
