# Test generated by RoostGPT for test rahul-local-test using AI Type Open AI and AI Model gpt-4

"""
1. **Scenario**: Test with a year that is divisible by 4 but not by 100
   **Expected Output**: The function should return True, as this is the definition of a leap year.

2. **Scenario**: Test with a year that is divisible by 100 but not by 400
   **Expected Output**: The function should return False, as this is not considered a leap year.

3. **Scenario**: Test with a year that is divisible by both 100 and 400
   **Expected Output**: The function should return True, as this is considered a leap year.

4. **Scenario**: Test with a year that is not divisible by 4
   **Expected Output**: The function should return False, as this is not a leap year.

5. **Scenario**: Test with a negative year
   **Expected Output**: The function should return False, as there are no leap years in BC.

6. **Scenario**: Test with a year that is zero
   **Expected Output**: The function should return False, as year zero is not a valid year.

7. **Scenario**: Test with a year in the future
   **Expected Output**: The function should return True or False based on whether it is a leap year or not.

8. **Scenario**: Test with current year
   **Expected Output**: The function should return True or False based on whether it is a leap year or not. 

9. **Scenario**: Test with a year that is a very large number
   **Expected Output**: The function should return True or False based on whether it is a leap year or not. 

10. **Scenario**: Test with a year that is a very small number (close to zero)
    **Expected Output**: The function should return False, as there are no leap years close to zero.
"""
import pytest
import calculate
from calendar import isleap
from datetime import datetime

def test_judge_leap_year_divisible_by_4_not_100():
    assert calculate.judge_leap_year(2024) == True

def test_judge_leap_year_divisible_by_100_not_400():
    assert calculate.judge_leap_year(1900) == False

def test_judge_leap_year_divisible_by_100_and_400():
    assert calculate.judge_leap_year(2000) == True

def test_judge_leap_year_not_divisible_by_4():
    assert calculate.judge_leap_year(2019) == False

def test_judge_leap_year_negative_year():
    assert calculate.judge_leap_year(-4) == False

def test_judge_leap_year_year_zero():
    assert calculate.judge_leap_year(0) == False

def test_judge_leap_year_future_year():
    future_year = datetime.now().year + 4
    assert calculate.judge_leap_year(future_year) == isleap(future_year)

def test_judge_leap_year_current_year():
    current_year = datetime.now().year
    assert calculate.judge_leap_year(current_year) == isleap(current_year)

def test_judge_leap_year_large_year():
    large_year = 100000
    assert calculate.judge_leap_year(large_year) == isleap(large_year)

def test_judge_leap_year_small_year():
    small_year = 3
    assert calculate.judge_leap_year(small_year) == False
