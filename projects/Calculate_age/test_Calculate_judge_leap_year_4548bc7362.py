# Test generated by RoostGPT for test rahul-local-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Scenario: Test with leap year as input
    - Description: Pass a year which is a leap year to the function and check whether it returns true.
    - Input: 2000
    - Expected Output: True
  
2. Scenario: Test with non-leap year as input
    - Description: Pass a year which is not a leap year to the function and check whether it returns false.
    - Input: 1900
    - Expected Output: False

3. Scenario: Test with year divisible by 4 and not by 100 as input
   - Description: Pass a year which is divisible by 4 and not by 100 to the function, it should return true.
   - Input: 2004
   - Expected Output: True
    
4. Scenario: Test with year divisible by 4 and by 100 but not by 400 as input
   - Description: Pass a year which is divisible by 4 and by 100 but not by 400 to the function, it should return false.
   - Input: 2100
   - Expected Output: False

5. Scenario: Test with year divisible by 100 and by 400 as input
   - Description: Pass a year which is divisible by 100 and by 400 to the function, it should return true.
   - Input: 2000
   - Expected Output: True
    
6. Scenario: Test with year not divisible by 4
   - Description: Pass a year which is not divisible by 4 to the function, it should return false.
   - Input: 2001
   - Expected Output: False

7. Scenario: Test with Negative year
    - Description: Pass a negative year to the function, it should return false.
    - Input: -1200
    - Expected Output: False

8. Scenario: Test with zero as year
    - Description: Pass zero as year to the function, it should return false.
    - Input: 0
    - Expected Output: False

Remember, the logic behind a leap year is:
  - The year should be divisible by 4
  - If the year is divisible by 100, it should also be divisible by 400
If the year satisfies these rules, it's a leap year.
"""
import pytest
import calculate

# Test with leap year as input
def test_judge_leap_year_leap_year():
    assert calculate.judge_leap_year(2000) == True

# Test with non-leap year as input
def test_judge_leap_year_non_leap_year():
    assert calculate.judge_leap_year(1900) == False

# Test with year divisible by 4 and not by 100 as input
def test_judge_leap_year_divisible_by_4_not_by_100():
    assert calculate.judge_leap_year(2004) == True

# Test with year divisible by 4 and by 100 but not by 400 as input
def test_judge_leap_year_divisible_by_4_by_100_not_by_400():
    assert calculate.judge_leap_year(2100) == False

# Test with year divisible by 100 and by 400 as input
def test_judge_leap_year_divisible_by_100_by_400():
    assert calculate.judge_leap_year(2000) == True

# Test with year not divisible by 4
def test_judge_leap_year_not_divisible_by_4():
    assert calculate.judge_leap_year(2001) == False

# Test with negative year
def test_judge_leap_year_negative_year():
    assert calculate.judge_leap_year(-1200) == False

# Test with zero as year
def test_judge_leap_year_zero_year():
    assert calculate.judge_leap_year(0) == False
