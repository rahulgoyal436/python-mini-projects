# Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

import calculate
import unittest
from unittest.mock import patch
from calendar import isleap

class TestCalculate(unittest.TestCase):

    def test_judge_leap_year(self):
        # Test that judge_leap_year correctly identifies leap years
        # 2000, 2004, 2008, etc. are leap years
        self.assertTrue(calculate.judge_leap_year(2000))
        self.assertTrue(calculate.judge_leap_year(2004))
        self.assertTrue(calculate.judge_leap_year(2020))

        # Test that judge_leap_year correctly identifies non-leap years
        # 2001, 2002, 2003 etc. are non-leap years
        self.assertFalse(calculate.judge_leap_year(2001))
        self.assertFalse(calculate.judge_leap_year(2002))
        self.assertFalse(calculate.judge_leap_year(2003))

        # Test that judge_leap_year returns False for years less than 1
        # as leaping year is after the Gregorian calendar was introduced
        self.assertFalse(calculate.judge_leap_year(0))
        self.assertFalse(calculate.judge_leap_year(-1))
    
    def test_is_leap_mocked(self):
        # Test that judge_leap_year function is making correct use of isleap function from calendar
        with patch('calculate.isleap') as mocked_isleap:
            mocked_isleap.return_value = True
            self.assertTrue(calculate.judge_leap_year(2000))
            mocked_isleap.assert_called()

            mocked_isleap.return_value = False
            self.assertFalse(calculate.judge_leap_year(2001))
            mocked_isleap.assert_called()

if __name__ == '__main__':
    unittest.main(verbosity=2)
